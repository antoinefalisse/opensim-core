% This script generates c-code from the function foo.m that contains the 
% expression graph of function F. The c-code foo_jac will contain the 
% function F and its Jacobian in a format that can be exploited by CasADi.
% Authors: Joris Gillis and Antoine Falisse

% function [] = generate_foo_jac(dim)

dim = 18;

import casadi.*
cg = CodeGenerator('foo_jac');
% arg should have the dimensions of the combined inputs of F, i.e. NX + NU
arg = SX.sym('arg',dim); 
[y_20_in,~,b_20_in] = foo_20_int(arg); % True case, b_T is 1 if conditional is True
[y_F,~,b_F] = foo_20_out(arg); % False case
[y,~,b] = foo(arg); % False case
% F = Function('F',{arg},{y});
% cg.add(F);
% cg.add(F.jacobian())
% cg.generate();

% y = if_else(b_T==1, y_T, y_F);
F = Function('F',{arg},{y});

cg.add(F);
cg.add(F.jacobian())
cg.generate();

angle = 250;
in1 = [cosd(angle), 0, sind(angle), 0, 1, 0, -sind(angle), 0, cosd(angle)];
in2 = [cosd(-angle), 0, sind(-angle), 0, 1, 0, -sind(-angle), 0, cosd(-angle)];
out1 = full(F([in1, in2]));

% angle = 20;
% in3 = [cosd(angle), 0, sind(angle), 0, 1, 0, -sind(angle), 0, cosd(angle)];
% in4 = [cosd(-angle), 0, sind(-angle), 0, 1, 0, -sind(-angle), 0, cosd(-angle)];
% out2 = full(F([in3, in4]));  
% 
% assert(round(out1, 5)==round(2.44346,5))
% assert(round(out2, 5)==round(0.698132,5))
% 
[y_T_num,~,b_T_num] = foo_T([in1, in2]); % True case, b_T is 1 if conditional is True
[y_F_num,~,b_F_num] = foo_T([in3, in4]); % False case
